terminal QUOTATIONS, WRITE, RETURN, READ, MAIN, IF, ELSE, END, BEGIN,
               ID, NUMBER, LEBRAC, RIGBRAC, SCOLON, COMMA, PLUS, MINUS,
               DIVIDE, MULT, NOTEQUAL, EQUAL, COLEQUAL, INT, REAL, STRING;

nonterminal String Program, _Program, MethodDecl,
                  FormalParams, FormalParam, _FormalParams, unmdstmt, mdstmt,
                  Block, LocalVarDecl, AssignStmt, Other,
                  ReturnStmt, WriteStmt, ReadStmt,
                  ExprOps, Expr, MultiExpr, MultiExprOps,
                  BoolExpr, ActualParams, ActualParam,
                  PrimaryExpr, Statement, _Statement, Type;

Program ::= MethodDecl:d _Program:g
               {:
                  RESULT = "import java.io.*;\npublic class A4\n{\nstatic BufferedReader $br;\nstatic BufferedWriter $bw;\n" + d + g + "\n}";
               :};

Type ::= INT {:
                  RESULT = " int ";
               :}
         | REAL
               {:
                  RESULT = " double ";
               :}
               | STRING
               {:
                  RESULT = " String ";
               :};


_Program ::= MethodDecl:d _Program:g
            {:
               RESULT = d + g;
            :}
            | {:RESULT = "";:};

MethodDecl ::= Type:h MAIN ID:i LEBRAC FormalParams:f RIGBRAC Block:b
            {:
               RESULT = "public static void main (String[] args) throws Exception" + b + "\n";
            :}
            | Type:h ID:i LEBRAC FormalParams:f RIGBRAC Block:b
            {:
               RESULT = "static"+ h + i + "("+ f + ")throws Exception " + b + "\n";
            :};

FormalParams ::= FormalParam:f _FormalParams:p {: RESULT = f + p + ""; :}
               | {:RESULT="";:}
               ;

_FormalParams ::= COMMA FormalParam:f _FormalParams:p {: RESULT = ", " + f + p; :}
               | {:RESULT="";:}
               ;

FormalParam ::= Type:h ID:i {: RESULT = h + i + ""; :}
               ;

Block ::= BEGIN _Statement:_s Statement:s END {: RESULT = "{\n" + _s +"\n"+ s +"\n}"; :};

Statement ::= _Statement:_s Statement:s
               {: RESULT = "\n" + _s + s + "\n"; :} | {:RESULT="";:};

Other ::= Block:b
         |  LocalVarDecl:lv {: RESULT = lv; :}
         |  AssignStmt:as {: RESULT = as + ""; :}
         |  ReturnStmt:rs {: RESULT = rs + ""; :}
         |  WriteStmt:ws {: RESULT = ws + ""; :}
         |  ReadStmt:rt  {: RESULT = rt + ""; :};

LocalVarDecl ::= Type:h ID:i SCOLON {: RESULT =  h + i + ";"; :}
               | Type:h AssignStmt:as {: RESULT = h + as + ""; :};


AssignStmt ::= ID:i COLEQUAL Expr:ex SCOLON {: RESULT =  i + "= " + ex +";"; :}
               | ID:i COLEQUAL QUOTATIONS:q SCOLON {: RESULT =  i + "= " + q +";"; :};

ReturnStmt ::= RETURN Expr:ex SCOLON {: RESULT =  "return " + ex +";"; :};

_Statement ::= mdstmt:m {: RESULT =  m + ""; :}
               | unmdstmt:um {: RESULT =  um + ""; :};

mdstmt ::= IF LEBRAC BoolExpr:be RIGBRAC mdstmt:m ELSE mdstmt:d {: RESULT = "if( " + be + ")\n" + m +" else " + d; :}
            | Other:o {: RESULT =  o + ""; :} ;

unmdstmt ::= IF LEBRAC BoolExpr:be RIGBRAC _Statement:_s {: RESULT = "if( " + be + ")\n" + _s; :}
            |
             IF LEBRAC BoolExpr:be RIGBRAC mdstmt:m ELSE unmdstmt:um {: RESULT = "if( " + be + ")\n" + m +" else " + um; :};

WriteStmt ::= WRITE LEBRAC Expr:ex COMMA QUOTATIONS:q RIGBRAC SCOLON {: RESULT = "$bw = new BufferedWriter(new FileWriter(" + q +"));\n$bw.write(\"\"+ "+ex+");\n$bw.close();"; :};

ReadStmt ::= READ LEBRAC ID:i COMMA QUOTATIONS:q RIGBRAC SCOLON {: RESULT = "$br = new BufferedReader(new FileReader(" + q + "));\n" + i + " = new Integer($br.readLine()).intValue();\n$br.close();"; :};

Expr ::= MultiExpr:me  ExprOps:eo {: RESULT = me + eo + ""; :};

ExprOps ::= MINUS MultiExpr:me ExprOps:eo {: RESULT = "-" + me + eo + ""; :}
            |
            PLUS MultiExpr:me ExprOps:eo {: RESULT = "+" + me + eo + ""; :}
            |  {:RESULT="";:}  ;

MultiExpr ::= PrimaryExpr:pe MultiExprOps:meo {:RESULT = pe + meo + ""; :};

MultiExprOps ::= MULT PrimaryExpr:pe MultiExprOps:meo {:RESULT = "*" + pe + meo; :}
                  |
                  DIVIDE PrimaryExpr:pe MultiExprOps:meo  {:RESULT = "/" + pe + meo; :}
                  | {:RESULT="";:};

PrimaryExpr ::= NUMBER:n {: RESULT = n + ""; :}
             | ID:i {: RESULT = i + ""; :}
             | LEBRAC Expr:ex RIGBRAC {: RESULT = "("+ ex +")"; :}
             | ID:i LEBRAC ActualParams:ap RIGBRAC {: RESULT = i+"(" +ap +")"; :}
             ;

BoolExpr ::= Expr:ex EQUAL Expr:ex2 {: RESULT = ex +" = " + ex2; :}
               | Expr:ex NOTEQUAL Expr:ex2 {: RESULT = ex +" != " + ex2; :};

ActualParams ::= Expr:ex ActualParam:ap {: RESULT = ex + ap + ""; :} |  {: RESULT=""; :};
ActualParam ::= COMMA Expr:ex ActualParam:ap {: RESULT = ", " + ex + ap; :} | {:RESULT="";:};
